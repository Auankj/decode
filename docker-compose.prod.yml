version: '3.8'

services:
  app:
    image: cookie-licking-detector:latest
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - GUNICORN_WORKERS=4
      - GUNICORN_WORKER_CLASS=uvicorn.workers.UvicornWorker
    volumes:
      - ./logs:/app/logs:rw
      - /etc/ssl/certs:/etc/ssl/certs:ro
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  celery-worker:
    image: cookie-licking-detector:latest
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
    volumes:
      - ./logs:/app/logs:rw
    restart: always
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  celery-beat:
    image: cookie-licking-detector:latest
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
    volumes:
      - ./logs:/app/logs:rw
    restart: always
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  celery-flower:
    image: cookie-licking-detector:latest
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - FLOWER_BASIC_AUTH=admin:secure_password_here
    restart: always
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=cookie_detector_prod
      - POSTGRES_USER=cookie_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: always
    secrets:
      - db_password
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Monitoring services
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: always

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_here
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: always

  # Log aggregation
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    restart: always

secrets:
  db_password:
    external: true

volumes:
  postgres_prod_data:
  redis_prod_data:
  prometheus_data:
  grafana_data:
  loki_data: